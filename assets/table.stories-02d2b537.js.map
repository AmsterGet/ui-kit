{"version":3,"file":"table.stories-02d2b537.js","sources":["../../src/components/icons/svg/arrowDown.svg","../../src/components/icons/svg/arrowUp.svg","../../src/components/icons/svg/meatballMenu.svg","../../src/components/table/types.ts","../../src/components/table/table.tsx","../../src/components/table/utils.ts"],"sourcesContent":["export default \"__VITE_ASSET__1c82f3e9__\"","export default \"__VITE_ASSET__fb15b9d9__\"","export default \"__VITE_ASSET__5c57c003__\"","import { ReactNode } from 'react';\n\nexport interface Column {\n  key: string;\n  header: string;\n}\nexport interface PrimaryColumn extends Column {\n  primary: boolean;\n}\nexport interface FixedColumn extends Column {\n  width: string | number;\n  align?: 'left' | 'center' | 'right';\n}\nexport interface RowConfigs {\n  size?: 'small' | 'medium' | 'large';\n}\nexport interface DetailedCellData {\n  content: string | number;\n  component: ReactNode;\n}\nexport interface RowData {\n  id: string | number;\n  [key: string]: DetailedCellData | RowConfigs | string | number | any;\n  rowConfigs?: RowConfigs;\n}\nexport enum SortDirection {\n  ASC = 'asc',\n  DESC = 'desc',\n}\nexport interface SortConfig {\n  key: string;\n  direction: SortDirection;\n}\nexport interface TableComponentProps {\n  data: RowData[];\n  primaryColumn: Column;\n  fixedColumns: FixedColumn[];\n  rowActionMenu?: ReactNode;\n  selectable?: boolean;\n  className?: string;\n  selectedRowIds?: (string | number)[];\n  sortingDirection?: SortDirection;\n  sortingColumn?: Column;\n  onChangeSorting?: (sortConfig?: SortConfig) => void;\n  onToggleRowSelection?: (id: string | number) => void;\n  onToggleAllRowsSelection?: () => void;\n}\n","import { CSSProperties, useMemo, useState, FC } from 'react';\nimport styles from './table.module.scss';\nimport classNames from 'classnames/bind';\nimport { ArrowDownIcon, ArrowUpIcon } from '@components/icons';\nimport { FixedColumn, PrimaryColumn, RowData, TableComponentProps, SortDirection } from './types';\nimport { Checkbox } from '@components/checkbox';\n\nconst cx = classNames.bind(styles);\n\nexport const Table: FC<TableComponentProps> = ({\n  data,\n  primaryColumn,\n  fixedColumns,\n  rowActionMenu,\n  className = '',\n  selectable = false,\n  selectedRowIds = [],\n  sortingDirection = SortDirection.ASC,\n  sortingColumn = primaryColumn,\n  onChangeSorting = () => {},\n  onToggleRowSelection = () => {},\n  onToggleAllRowsSelection = () => {},\n}) => {\n  const [hoveredColumn, setHoveredColumn] = useState<string | null>(null);\n  const [hoveredRow, setHoveredRow] = useState<number | null>(null);\n\n  const columns: (PrimaryColumn | FixedColumn)[] = useMemo(() => {\n    return [{ ...primaryColumn, primary: true }, ...fixedColumns];\n  }, [primaryColumn, fixedColumns]);\n\n  const handleSort = (key: string) => {\n    onChangeSorting({ key, direction: sortingDirection });\n  };\n\n  const getCellStyle = (column: FixedColumn): CSSProperties => {\n    return {\n      width: column.width,\n      textAlign: column.align,\n    };\n  };\n\n  const handleMouseEnter = (key: string) => {\n    setHoveredColumn(key);\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredColumn(null);\n  };\n\n  const handleRowMouseEnter = (index: number) => {\n    setHoveredRow(index);\n  };\n\n  const handleRowMouseLeave = () => {\n    setHoveredRow(null);\n  };\n\n  const handleRowCheck = (id: number | string) => {\n    onToggleRowSelection(id);\n  };\n\n  const handleCheckAll = () => {\n    onToggleAllRowsSelection();\n  };\n\n  const isAllChecked: boolean = data.every((item) => selectedRowIds.includes(item.id));\n  const isAnyChecked: boolean = data.some((item) => selectedRowIds.includes(item.id));\n\n  const getSizeClassName = (item: RowData): string => {\n    const size = item.rowConfigs?.size ?? 'default';\n    return `size-${size}`;\n  };\n\n  const getSortIcon = (columnKey: string) => {\n    if (sortingColumn?.key === columnKey) {\n      return sortingDirection === SortDirection.ASC ? <ArrowUpIcon /> : <ArrowDownIcon />;\n    }\n    return <ArrowUpIcon />;\n  };\n\n  return (\n    <div className={cx('table', className)}>\n      <div className={cx('table-header')}>\n        {selectable && (\n          <div className={cx('table-header-cell', 'checkbox-cell')}>\n            {isAnyChecked && (\n              <Checkbox\n                value={isAllChecked}\n                partiallyChecked={isAnyChecked}\n                onChange={handleCheckAll}\n                className={cx('checkbox-cell')}\n              />\n            )}\n          </div>\n        )}\n        {columns.map((column) => (\n          <button\n            key={column.key}\n            className={cx('table-header-cell', {\n              [`align-${(column as FixedColumn).align}`]: 'align' in column,\n              'primary-cell': 'primary' in column && column.primary,\n            })}\n            style={getCellStyle(column as FixedColumn)}\n            onClick={() => handleSort(column.key)}\n            onMouseEnter={() => handleMouseEnter(column.key)}\n            onMouseLeave={handleMouseLeave}\n          >\n            <span>{column.header}</span>\n\n            {(hoveredColumn === column.key || sortingColumn?.key === column.key) &&\n              getSortIcon(column.key)}\n          </button>\n        ))}\n        {rowActionMenu && <div className={cx('table-header-cell', 'action-menu-cell')} />}\n      </div>\n\n      <div className={cx('table-body')}>\n        {data.map((item, index) => (\n          <div\n            key={item.id}\n            className={cx('table-row', getSizeClassName(item))}\n            onMouseEnter={() => handleRowMouseEnter(index)}\n            onMouseLeave={handleRowMouseLeave}\n          >\n            {selectable && (\n              <div className={cx('table-cell', 'checkbox-cell')}>\n                {(isAnyChecked || hoveredRow === index) && (\n                  <Checkbox\n                    value={selectedRowIds.includes(item.id)}\n                    onChange={() => handleRowCheck(item.id)}\n                    className={cx('checkbox-cell')}\n                  />\n                )}\n              </div>\n            )}\n            <div className={cx('table-row-content')}>\n              {columns.map((column) => (\n                <div\n                  key={column.key}\n                  className={cx('table-cell', 'table-cell', {\n                    'primary-cell': 'primary' in column && column.primary,\n                  })}\n                  style={getCellStyle(column as FixedColumn)}\n                >\n                  {item[column.key].component || item[column.key].content || item[column.key]}\n                </div>\n              ))}\n\n              {rowActionMenu && (\n                <div className={cx('table-cell', 'action-menu-cell')}>{rowActionMenu}</div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { RowData, SortConfig, SortDirection } from './types';\n\nexport const sortTableData = (tableData: RowData[], sortConfig?: SortConfig): RowData[] => {\n  if (sortConfig) {\n    tableData.sort((a, b) => {\n      const contentA = a[sortConfig.key].content || a[sortConfig.key];\n      const contentB = b[sortConfig.key].content || b[sortConfig.key];\n      console.log(contentA, contentB);\n      if (contentA < contentB) {\n        return sortConfig.direction === SortDirection.ASC ? -1 : 1;\n      }\n      if (contentA > contentB) {\n        return sortConfig.direction === SortDirection.ASC ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n  return tableData;\n};\n"],"names":["SvgArrowDown","props","React.createElement","SvgArrowUp","SvgMeatballMenu","SortDirection","cx","classNames","styles","Table","data","primaryColumn","fixedColumns","rowActionMenu","className","selectable","selectedRowIds","sortingDirection","sortingColumn","onChangeSorting","onToggleRowSelection","onToggleAllRowsSelection","hoveredColumn","setHoveredColumn","useState","hoveredRow","setHoveredRow","columns","useMemo","handleSort","key","getCellStyle","column","handleMouseEnter","handleMouseLeave","handleRowMouseEnter","index","handleRowMouseLeave","handleRowCheck","id","handleCheckAll","isAllChecked","item","isAnyChecked","getSizeClassName","_a","getSortIcon","columnKey","jsx","ArrowUpIcon","ArrowDownIcon","jsxs","Checkbox","sortTableData","tableData","sortConfig","a","b","contentA","contentB"],"mappings":"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"}