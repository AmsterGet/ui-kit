{"version":3,"file":"pagination.stories-b8571405.js","sources":["../../src/components/icons/svg/prevPage.svg","../../src/components/icons/svg/prevChapter.svg","../../src/components/pagination/itemsCounter/itemCounter.tsx","../../src/components/pagination/pageSizeControl/sizeSelector/sizeSelector.tsx","../../src/components/pagination/pageSizeControl/pageSizeControl.tsx","../../src/components/pagination/pageControls/activePage/pageSelector/pageSelector.tsx","../../src/components/pagination/pageControls/activePage/activePage.tsx","../../src/components/pagination/pageControls/pageNavigator/pageNavigator.tsx","../../src/components/pagination/pageControls/pageControls.tsx","../../src/components/pagination/pagination.tsx"],"sourcesContent":["export default \"__VITE_ASSET__24b735a5__\"","export default \"__VITE_ASSET__249934f6__\"","import { FC, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './itemCounter.module.scss';\n\nconst cx = classNames.bind(styles);\n\nexport interface ItemCounterProps {\n  activePage: number;\n  pageSize: number;\n  totalItems: number;\n  ofText: string;\n  itemsText: string;\n}\n\nexport const ItemCounter: FC<ItemCounterProps> = ({\n  activePage,\n  pageSize,\n  totalItems,\n  ofText,\n  itemsText,\n}): ReactElement => {\n  const endIndex = activePage * pageSize;\n  const startIndex = endIndex - pageSize;\n  return (\n    <div className={cx('item-counter')}>\n      {`${startIndex + 1} - ${endIndex < totalItems ? endIndex : totalItems}`}\n      {` ${ofText} ${totalItems} ${itemsText}`}\n    </div>\n  );\n};\n","import { FC, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport { ChangePageSize } from '../../types';\nimport styles from './sizeSelector.module.scss';\n\nconst cx = classNames.bind(styles);\n\nexport interface SizeSelectorProps {\n  currentSize: number;\n  options: number[];\n  onClickOption: ChangePageSize;\n}\n\nexport const SizeSelector: FC<SizeSelectorProps> = ({\n  currentSize,\n  options,\n  onClickOption,\n}): ReactElement => {\n  return (\n    <div className={cx('size-selector')}>\n      {options.map((size) => (\n        <button\n          key={size}\n          className={cx('size-option', { selected: size === currentSize })}\n          onClick={() => {\n            onClickOption(size);\n          }}\n        >\n          {size}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import { FC, ReactElement, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport { Popover } from '@components/popover';\nimport { Button } from '@components/button';\nimport { ChangePageSize } from '../types';\nimport { SizeSelector } from './sizeSelector/sizeSelector';\nimport styles from './pageSizeControl.module.scss';\n\nconst cx = classNames.bind(styles);\n\ninterface PageSizeControlProps {\n  size: number;\n  sizeOptions: number[];\n  perPageText: string;\n  changeSize: ChangePageSize;\n}\n\nexport const PageSizeControl: FC<PageSizeControlProps> = ({\n  size,\n  sizeOptions,\n  perPageText,\n  changeSize,\n}): ReactElement => {\n  const [isSizeSelectorOpened, setIsSizeSelectorOpened] = useState(false);\n\n  const onClickOption: ChangePageSize = (newSize) => {\n    changeSize(newSize);\n    setIsSizeSelectorOpened(false);\n  };\n\n  return (\n    <div className={cx('page-size-control')}>\n      <Popover\n        content={\n          <SizeSelector options={sizeOptions} onClickOption={onClickOption} currentSize={size} />\n        }\n        placement=\"top\"\n        isOpened={isSizeSelectorOpened}\n        setIsOpened={setIsSizeSelectorOpened}\n      >\n        <Button className={cx('size-selector-button')} variant=\"text\">\n          {size}\n        </Button>\n      </Popover>\n      {` ${perPageText}`}\n    </div>\n  );\n};\n","import { FC, ChangeEventHandler, ReactElement, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport { FieldText } from '@components/fieldText';\nimport { Button } from '@components/button';\nimport { ChangePage } from '../../../types';\nimport styles from './pageSelector.module.scss';\n\nconst cx = classNames.bind(styles);\n\ninterface PageSelectorProps {\n  pageText: string;\n  goActionText: string;\n  totalPages: number;\n  selectPage: ChangePage;\n}\n\nexport const PageSelector: FC<PageSelectorProps> = ({\n  totalPages,\n  pageText,\n  goActionText,\n  selectPage,\n}): ReactElement => {\n  // TODO: think of replacing with react-hook-form or formik\n  const [page, setPage] = useState('');\n  const [valid, setValid] = useState(true);\n\n  const onPageInputChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    const pageValue = event.target.value.replace(/\\D/g, '');\n    const pageValueNumber = Number(pageValue);\n    const isValid = pageValueNumber > 0 && pageValueNumber <= totalPages;\n\n    setValid(isValid);\n    setPage(pageValue);\n  };\n\n  const applyPage = () => {\n    selectPage(Number(page));\n  };\n\n  return (\n    <div className={cx('page-selector')}>\n      <div className={cx('field-wrapper')}>\n        <FieldText\n          onChange={onPageInputChange}\n          value={page}\n          placeholder={pageText}\n          error={valid ? '' : 'Error'}\n          touched\n          defaultWidth={false}\n          displayError={false}\n        />\n      </div>\n      <Button onClick={applyPage} disabled={!page || !valid} className={cx('apply-button')}>\n        {goActionText}\n      </Button>\n    </div>\n  );\n};\n","import { FC, ReactElement, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport { Popover } from '@components/popover';\nimport { Button } from '@components/button';\nimport { PageSelector } from './pageSelector/pageSelector';\nimport { ChangePage } from '../../types';\nimport styles from './activePage.module.scss';\n\nconst cx = classNames.bind(styles);\n\ninterface ActivePageProps {\n  activePage: number;\n  totalPages: number;\n  pageText: string;\n  goToText: string;\n  goActionText: string;\n  changePage: ChangePage;\n}\n\nexport const ActivePage: FC<ActivePageProps> = ({\n  activePage,\n  totalPages,\n  pageText,\n  goToText,\n  goActionText,\n  changePage,\n}): ReactElement => {\n  const [isPageSelectorOpened, setIsPageSelectorOpened] = useState(false);\n\n  const selectPage: ChangePage = (newPage) => {\n    changePage(newPage);\n    setIsPageSelectorOpened(false);\n  };\n\n  return (\n    <div className={cx('active-page')}>\n      {`${pageText} `}\n      <Popover\n        content={\n          <PageSelector\n            pageText={pageText}\n            goActionText={goActionText}\n            selectPage={selectPage}\n            totalPages={totalPages}\n          />\n        }\n        title={goToText}\n        placement=\"top\"\n        isOpened={isPageSelectorOpened}\n        setIsOpened={setIsPageSelectorOpened}\n        className={cx('page-selector')}\n      >\n        <Button className={cx('page-selector-button')} variant=\"text\">\n          {activePage}\n        </Button>\n      </Popover>\n    </div>\n  );\n};\n","import { FC, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport { BaseIconButton, PrevPageIcon, PrevChapterIcon } from '@components/icons';\nimport { ChangePage } from '../../types';\nimport styles from './pageNavigator.module.scss';\n\nconst cx = classNames.bind(styles);\n\nexport interface PageNavigatorProps {\n  activePage: number;\n  totalPages: number;\n  changePage: ChangePage;\n}\n\nexport const PageNavigator: FC<PageNavigatorProps> = ({\n  activePage,\n  changePage,\n  totalPages,\n}): ReactElement => {\n  const toFirstPage = () => {\n    changePage(1);\n  };\n  const toPrevPage = () => {\n    changePage(activePage - 1);\n  };\n  const toNextPage = () => {\n    changePage(activePage + 1);\n  };\n  const toLastPage = () => {\n    changePage(totalPages);\n  };\n\n  return (\n    <div className={cx('page-navigator')}>\n      <div className={cx('page-buttons')}>\n        <BaseIconButton\n          className={cx('page-button')}\n          onClick={toFirstPage}\n          disabled={activePage === 1}\n        >\n          <PrevChapterIcon />\n        </BaseIconButton>\n        <BaseIconButton\n          className={cx('page-button')}\n          onClick={toPrevPage}\n          disabled={activePage === 1}\n        >\n          <PrevPageIcon />\n        </BaseIconButton>\n      </div>\n      <div className={cx('page-buttons')}>\n        <BaseIconButton\n          className={cx('page-button', 'next')}\n          onClick={toNextPage}\n          disabled={activePage === totalPages}\n        >\n          <PrevPageIcon />\n        </BaseIconButton>\n        <BaseIconButton\n          className={cx('page-button', 'next')}\n          onClick={toLastPage}\n          disabled={activePage === totalPages}\n        >\n          <PrevChapterIcon />\n        </BaseIconButton>\n      </div>\n    </div>\n  );\n};\n","import { FC, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport { ChangePage } from '../types';\nimport { ActivePage } from './activePage/activePage';\nimport { PageNavigator } from './pageNavigator/pageNavigator';\nimport styles from './pageControls.module.scss';\n\nconst cx = classNames.bind(styles);\n\ntype PageControlsCaptions = {\n  page: string;\n  goTo: string;\n  goAction: string;\n  of: string;\n};\n\nexport interface PageControlsProps {\n  activePage: number;\n  totalPages: number;\n  changePage: ChangePage;\n  captions: PageControlsCaptions;\n}\n\nexport const PageControls: FC<PageControlsProps> = ({\n  activePage,\n  changePage,\n  captions,\n  totalPages,\n}): ReactElement => {\n  return (\n    <div className={cx('page-controls')}>\n      <ActivePage\n        activePage={activePage}\n        totalPages={totalPages}\n        changePage={changePage}\n        pageText={captions.page}\n        goToText={captions.goTo}\n        goActionText={captions.goAction}\n      />\n      <PageNavigator changePage={changePage} activePage={activePage} totalPages={totalPages} />\n      <span className={cx('total-pages')}>\n        {`${captions.of} `}\n        {totalPages}\n      </span>\n    </div>\n  );\n};\n","import { FC, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport { ItemCounter } from './itemsCounter/itemCounter';\nimport { PageSizeControl } from './pageSizeControl/pageSizeControl';\nimport { PageControls } from './pageControls/pageControls';\nimport { ChangePageSize, ChangePage } from './types';\nimport styles from './pagination.module.scss';\n\nconst cx = classNames.bind(styles);\n\ntype PaginationCaptions = {\n  items?: string;\n  of?: string;\n  page?: string;\n  goTo?: string;\n  goAction?: string;\n  perPage?: string;\n};\n\nexport interface PaginationProps {\n  activePage: number;\n  totalPages: number;\n  pageSize: number;\n  totalItems: number;\n  pageSizeOptions: number[];\n  changePage: ChangePage;\n  changePageSize: ChangePageSize;\n  captions?: PaginationCaptions;\n}\n\nexport const Pagination: FC<PaginationProps> = ({\n  activePage,\n  totalPages,\n  pageSize,\n  totalItems,\n  pageSizeOptions,\n  changePage,\n  changePageSize,\n  captions,\n}): ReactElement => {\n  const ofText = captions?.of || 'of';\n  const pageText = captions?.page || 'Page';\n\n  return (\n    <div className={cx('pagination')}>\n      <ItemCounter\n        activePage={activePage}\n        pageSize={pageSize}\n        totalItems={totalItems}\n        ofText={ofText}\n        itemsText={captions?.items || 'items'}\n      />\n      {totalPages > 1 && (\n        <PageControls\n          activePage={activePage}\n          totalPages={totalPages}\n          changePage={changePage}\n          captions={{\n            page: pageText,\n            of: ofText,\n            goTo: captions?.goTo || 'Go to page',\n            goAction: captions?.goAction || 'Go',\n          }}\n        />\n      )}\n      <PageSizeControl\n        size={pageSize}\n        sizeOptions={pageSizeOptions}\n        changeSize={changePageSize}\n        perPageText={captions?.perPage || 'per page'}\n      />\n    </div>\n  );\n};\n"],"names":["SvgPrevPage","props","React.createElement","SvgPrevChapter","cx","classNames","styles","ItemCounter","activePage","pageSize","totalItems","ofText","itemsText","endIndex","startIndex","jsxs","SizeSelector","currentSize","options","onClickOption","jsx","size","PageSizeControl","sizeOptions","perPageText","changeSize","isSizeSelectorOpened","setIsSizeSelectorOpened","useState","newSize","Popover","Button","PageSelector","totalPages","pageText","goActionText","selectPage","page","setPage","valid","setValid","onPageInputChange","event","pageValue","pageValueNumber","isValid","applyPage","FieldText","ActivePage","goToText","changePage","isPageSelectorOpened","setIsPageSelectorOpened","newPage","PageNavigator","toFirstPage","toPrevPage","toNextPage","toLastPage","BaseIconButton","PrevChapterIcon","PrevPageIcon","PageControls","captions","Pagination","pageSizeOptions","changePageSize"],"mappings":"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"}